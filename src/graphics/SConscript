# Default flags for most of the files, some my differ as aggresive optimizatiaons are used
flags = ["-O3", "-m64", "-mavx", "-flto", "-idirafter ../../include/sys"]
debug_flags = ["-Og", "-g", "-mavx", "-m64", "-Wpedantic", "-idirafter ../../include/sys"]
quick_flags = ["-O", "-m64", "-idirafter ../../include/sys"]

Import('ARCH')
Import('BUILD_TYPE')
Import('TUNE')
Import('VULKAN')
Import('OPENGL')

flags.append("-march=" + ARCH)
debug_flags.append("-march=" + ARCH)
quick_flags.append("-march=" + ARCH)

flags.append("-mtune=" + TUNE)
debug_flags.append("-mtune=" + TUNE)
quick_flags.append("-mtune=" + TUNE)

env = Environment( CPPPATH = "../../include" )

if BUILD_TYPE == "FINAL":
    env.Append( CPPFLAGS = flags )
    env["CPPDEFINES"] = { "_PRODUCTION_" : None }
elif BUILD_TYPE == "DEBUG":
    env.Append( CPPFLAGS = debug_flags )
    env["CPPDEFINES"] = { "_DEBUG_" : None }
elif BUILD_TYPE == "QUICK":
    env.Append( CPPFLAGS = quick_flags )
    env["CPPDEFINES"] = { "_QUICK_" : None }

# TODO: Vulkan version

if VULKAN == 'TRUE':
    env.Append( CPPDEFINES = { "_VULKAN_" : None } )
    Object('vkLoad.cpp')
    # TODO: If both Vulkan and OpenGL are being compiled, make them both DLLs
if OPENGL == 'TRUE':
    env.Append( CPPDEFINES = { "_OPENGL_" : None } )
    Object('initGL.cpp')
    # TODO: Add target cenginegl.dll/libcenginegl.so
    # TODO: If just OpenGL is being compiled, embed it into the main arhive
